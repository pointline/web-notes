(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{316:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"流、元素与基本尺寸"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流、元素与基本尺寸"}},[t._v("#")]),t._v(" 流、元素与基本尺寸")]),t._v(" "),a("p",[t._v("元素分类：块级元素（block-level element）和内联元素（inline element）")]),t._v(" "),a("h2",{attrs:{id:"块级元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#块级元素"}},[t._v("#")]),t._v(" 块级元素")]),t._v(" "),a("p",[t._v("常见的块级元素 div、li 和 table 等。需要注意"),a("code",[t._v("块级元素")]),t._v("和"),a("code",[t._v("display为block")]),t._v("的元素不是一个概念。li 元素默认的 display 值是 list-item，table 元素默认的 display 值是 table，但是它们均是块级元素，因为它们都符合块级元素的基本特征。"),a("code",[t._v("也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示")])]),t._v(" "),a("p",[t._v("正是由于“块级元素”具有换行特性，因此理论上它都可以配合 clear 属性来清除浮动带来的影响")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".clear::after")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 可以是block，或者是list-item\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" both"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("实际开发，使用 block 或 table，并不会使用 list-item。主要有 3 个原因")]),t._v(" "),a("ul",[a("li",[t._v("list-item 字符比较多")]),t._v(" "),a("li",[t._v("会出现不需要的项目符号")]),t._v(" "),a("li",[t._v("IE 浏览器不支持伪元素的 display 值伪 list-item")])]),t._v(" "),a("blockquote",[a("p",[t._v("提问：请问 IE 浏览器为什么不支持伪元素的 display 值为 list-item 呢？")])]),t._v(" "),a("h3",{attrs:{id:"为什么-list-item-元素会出现项目符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-list-item-元素会出现项目符号"}},[t._v("#")]),t._v(" 为什么 list-item 元素会出现项目符号")]),t._v(" "),a("p",[t._v("CSS 中的盒子：块级盒子（block-level box）和内联盒子（inline box）。块级盒子就负责结构，内联盒子就负责内容")]),t._v(" "),a("p",[t._v("list-item 元素会出现项目符号是因为生成了一个附加的盒子，学名”标记盒子“（marker box），专门用来放圆点数字这些项目符号。IE 浏览器下伪元素不支持 list-item 或许就是无法创建这个“标记盒子”导致的")]),t._v(" "),a("p",[t._v("每个元素都有两个盒子，外在盒子和内在盒子。外在盒子负责元素是可以一行显示，还是只能换行显示；内在盒子负责宽高、内容呈现什么的，或者叫“容器盒子”。")]),t._v(" "),a("blockquote",[a("p",[t._v("按照 display 的属性值不同，值为 block 的元素的盒子实际由外在的“块级盒子”和内在的“块级容器盒子”组成，值为 inline-block 的元素则由外在的“内联盒子”和内在的“块级容器盒子”组成，值为 inline 的元素则内外均是“内联盒子”")])]),t._v(" "),a("p",[t._v("现在明白为何 display 属性值是 inline-block\b 的元素既能和图文一行显示，又能直接设置 width/height 了吧！因为有两个盒子，外面的盒子是 inline 级别，里面的盒子是 block 级别")]),t._v(" "),a("h3",{attrs:{id:"display：inline-table-的盒子是怎样组成的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#display：inline-table-的盒子是怎样组成的"}},[t._v("#")]),t._v(" display：inline-table 的盒子是怎样组成的")]),t._v(" "),a("p",[t._v("外面是“内联盒子”，里面是“table 盒子”。得到就是一个可以和文字在一行显示的表格")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".inline-table")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inline-table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 128px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin-left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1px solid #cad5eb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"width-height-作用在哪个盒子上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#width-height-作用在哪个盒子上"}},[t._v("#")]),t._v(" width/height 作用在哪个盒子上")]),t._v(" "),a("blockquote",[a("p",[t._v("是内在盒子，也就是“容器盒子”")])]),t._v(" "),a("h2",{attrs:{id:"width-height-作用的具体细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#width-height-作用的具体细节"}},[t._v("#")]),t._v(" width/height 作用的具体细节")]),t._v(" "),a("h3",{attrs:{id:"深藏不露的-width-auto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深藏不露的-width-auto"}},[t._v("#")]),t._v(" 深藏不露的 width: auto")]),t._v(" "),a("p",[t._v("width 的默认值是 auto。auto 因为默认值，所以出镜率不高，但是，它却是个深藏不漏的家伙，它至少包含了以下 4 种不同的宽度表现")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("充分利用空间：比方说div、p这些元素的宽度默认是100%于父级容器的。这种充分利用可用空间的行为还有个专有名字，叫作fill-available")])]),t._v(" "),a("li",[a("code",[t._v("收缩与包裹：典型代表就是浮动、绝对定位、inline-block元素或table元素，英文称为shrink-to-fit，直译为“收缩到合适”")])]),t._v(" "),a("li",[a("code",[t._v("收缩到最小：这个最容易出现在table-layout为auto的表格中")])]),t._v(" "),a("li",[a("code",[t._v("超出容器限制：除非有明确的width相关设置，否则上面3种情况尺寸都不会主动超出父级容器宽度的，但是存在一些特殊情况。例如内容很长的英文设置了white-space:nowrap")])])]),t._v(" "),a("blockquote",[a("p",[t._v("在 CSS 世界中，盒子分“内在盒子”和“外在盒子”，显示也分“内部显示”和“外部显示”，同样地，尺寸也分“内部尺寸”和“外部尺寸”。内部尺寸由内部元素决定；还有一类叫作“外部尺寸”，宽度由外部元素决定")])]),t._v(" "),a("p",[a("code",[t._v("div默认宽度100%显示，是“外部尺寸”，其余全部是“内部尺寸”。而这唯一的“外部尺寸”，是“流”的精髓所在")])]),t._v(" "),a("h4",{attrs:{id:"外部尺寸与流体的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外部尺寸与流体的特性"}},[t._v("#")]),t._v(" 外部尺寸与流体的特性")]),t._v(" "),a("h5",{attrs:{id:"正常流宽度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正常流宽度"}},[t._v("#")]),t._v(" 正常流宽度")]),t._v(" "),a("p",[t._v("在页面中随便扔一个 div 元素，其尺寸表现就会和这水流一样铺满容器。这就是 block 容器的流特性。这种特性，所有的浏览器表现都是一致的")]),t._v(" "),a("p",[t._v("因此，实在想不通，为何有类似下面的 css")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("\ba")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("a 元素默认 display 是 inline，所以，设置 display:block 使其块状化绝对没有问题，但后面的 width:100%就没有任何出现的必要了")]),t._v(" "),a("blockquote",[a("p",[t._v("鑫三无准则，即“无宽度，无图片，无浮动”，为何要“无宽度”原因很简单，表现为“外部尺寸”的块级元素一旦设置了宽度，流动性就丢失了")])]),t._v(" "),a("blockquote",[a("p",[t._v("所谓流动性，并不是看上去的宽度 100%显示这么简单，而是一种 margin/border/padding 和 content 内容区域自动分配水平空间的机制")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://demo.cssworld.cn/3/2-3.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEMO “外部尺寸”block 元素的流动性示意实例页面"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("前者无 width 设置，完全借助流特性，后者宽度 width: 100%。结果，后者的尺寸超出了外部的容器，完全就不像“水流”那样完全利用容器空间，即所谓的“流动性丢失”")]),t._v(" "),a("p",[t._v("借助流动性无宽度布局，那就算外面的容器尺寸变化也可以自适应")]),t._v(" "),a("blockquote",[a("p",[t._v("记住“无宽度”这条准则，少了代码，少了计算，少了维护")])]),t._v(" "),a("h5",{attrs:{id:"格式化宽度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式化宽度"}},[t._v("#")]),t._v(" 格式化宽度")]),t._v(" "),a("blockquote",[a("p",[t._v("格式化宽度仅出现在“绝对定位模型中”，也就是出现在 position 属性值为 absolute 或 fixed 的元素中。在默认情况下，绝对定位元素的宽度表现是“包裹性”，宽度由内部尺寸决定，但是，有一种情况其宽度是由外部尺寸决定的")])]),t._v(" "),a("blockquote",[a("p",[t._v("是什么情况的呢？对于非替换元素，当 left/right 或 top/bottom 对立方位的属性值同时存在的时候，元素的宽度表现为“格式化宽度”，其宽度大小相对于最近的具有定位特性（position 属性值不是 static）的祖先元素计算")])]),t._v(" "),a("p",[t._v("“格式化宽度”具有完全的流体性，也就是 margin、border、padding 和 content 内容区域同样会自动分配水平（和垂直）空间")]),t._v(" "),a("h4",{attrs:{id:"内部尺寸与流体特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部尺寸与流体特性"}},[t._v("#")]),t._v(" 内部尺寸与流体特性")]),t._v(" "),a("p",[t._v("所谓“内部尺寸”，简单来讲就是元素的尺寸由内部的元素决定，而非由外部的容器决定。如何快速判断一个元素使用的是否为“内部尺寸”呢？很简单，假如这个元素里面没有内容，宽度就是 0，那就是应用的“内部尺寸”")]),t._v(" "),a("h5",{attrs:{id:"包裹性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包裹性"}},[t._v("#")]),t._v(" 包裹性")]),t._v(" "),a("p",[t._v("“包裹性”，除了“包裹”，还有“自适应性”")]),t._v(" "),a("p",[t._v("所谓“自适应”，指的是元素尺寸由内部元素决定，但永远小于“包含块”容器的尺寸。换句话说就是“包裹性”元素冥冥中有个 max-width：100%罩着的感觉")]),t._v(" "),a("p",[t._v("因此，对于一个元素，如果其 display 属性值是 inline-block，那么即使其里面的内容再多，只要是正常文本，宽度也不会超过容器。")]),t._v(" "),a("p",[t._v("按钮就是 css 世界中极具代表性的 inline-block 元素，可谓展示“包裹性”最好的例子，具体表现为：按钮文字越多宽度越宽（内部尺寸特性），但如果文字足够多，则会在容器的宽度处自动换行（自适应特性）")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://demo.cssworld.cn/3/2-4.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEMO 按钮元素“包裹性”示意实例页面"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("“包裹性”对实际开发有什么用呢？")])]),t._v(" "),a("p",[t._v("希望文字少的时候居中显示，文字超过一行的时候居左显示")]),t._v(" "),a("p",[t._v("核心 css")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("text-align")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" center"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".content")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" inline-block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("text-align")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://demo.cssworld.cn/3/2-5.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEMO 按钮元素“包裹性”示意实例页面"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("除了 inline-block 元素，浮动元素以及绝对定位元素都具有包裹性，均有类似的智能宽度行为")]),t._v(" "),a("h5",{attrs:{id:"首选最小宽度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首选最小宽度"}},[t._v("#")]),t._v(" 首选最小宽度")]),t._v(" "),a("p",[t._v("所谓“首选最小宽度”，指的是元素最适合的最小宽度。接着上面的例子，在上面例子中，外部容器的宽度是 240 像素，假设宽度是 0，请问里面的 inline-block 元素的宽度是多少？")]),t._v(" "),a("p",[t._v("是 0 吗？不是。"),a("code",[t._v("在CSS世界中，图片和文字的权重要远大于布局，因此，CSS的设计者显然是不会让图文在width：auto时宽度变成0，此时所表现的宽度就是“首选最小宽度”")])]),t._v(" "),a("p",[t._v("具体规则表现如下：")]),t._v(" "),a("ul",[a("li",[t._v("东亚文字（如中文）最小宽度为每个汉字的宽度")]),t._v(" "),a("li",[t._v("西方文字最小宽度由特定的连续的英文字符单元决定")]),t._v(" "),a("li",[t._v("类似图片这样的替换元素的最小宽度就是该元素内容本身的宽度")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://demo.cssworld.cn/3/2-6.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEMO 首选最小宽度”与凹凸效果实例页面"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("最大宽度")])]),t._v(" "),a("p",[t._v("最大宽度就是元素可以有的最大宽度。“最大宽度”实际等同于“包裹性”元素设置 white-space: nowrap 声明后的宽度。如果内部没有块级元素或者块级元素没有设定宽度值，则“最大宽度”实际上是最大的连续内联盒子的宽度")]),t._v(" "),a("h3",{attrs:{id:"width-值作用的细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#width-值作用的细节"}},[t._v("#")]),t._v(" width 值作用的细节")]),t._v(" "),a("p",[t._v("CSS 世界中与尺寸相关的一个重要的概念--“盒尺寸（box dimension）”。width 是作用在“内在盒子”上的，这个“内在盒子”是由很多部分构成的")]),t._v(" "),a("blockquote",[a("p",[t._v("“内在盒子”又被分成 4 个盒子，分别是 content box、padding box、border box 和 margin box")])]),t._v(" "),a("blockquote",[a("p",[t._v("content box 写作 content-box，padding box 写作 padding-box，border box 写作 border-box，margin box 写作...突然发现，margin box 居然没有名字。为何唯独 margin box 并没有对应的 css 关键字名称呢？因为目前没有任何场景需要用到 margin box")])]),t._v(" "),a("blockquote",[a("p",[t._v("“margin 的背景永远是透明的”，因此不可能作为 background-clip 或 background-origin 属性值出现。margin 一旦设定具体宽度和高度值，其本身的尺寸是不会因 margin 值变化而变化的，因此作为 box-sizing 的属性值存在也就没有了意义。既然无用武之地，自然就被抛弃了")])]),t._v(" "),a("p",[t._v("width：100px 是如何作用到 div 元素上的？")]),t._v(" "),a("blockquote",[a("p",[t._v("在 css2.1 的规范中，有一段非常露骨的描述：content box 环绕着 width 和 height 给定的矩形。那么 width 就是作用在 content box 上的")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://demo.cssworld.cn/3/2-8.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("DEMO width, padding, border 同时存在的宽度表现实例页面"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("因为宽度的作用在 content box 上的，而外面围绕的 padding box 和 border box 又不是摆设，自然实际尺寸要比设定的大")]),t._v(" "),a("p",[t._v("如果但看定义和表现，似乎一切都合情合理，但实际上，多年的时间告诉我，有时候，这种宽度设定和表现并不合理。总结为以下两点")]),t._v(" "),a("p",[t._v("流动性丢失，对于块状元素，如果 width：auto，则元素会如水流般充满整个容器，而一旦设定了 width 具体数值，则元素的流动性就会被阻断")]),t._v(" "),a("h3",{attrs:{id:"css-流体布局下的宽度分离原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-流体布局下的宽度分离原则"}},[t._v("#")]),t._v(" CSS 流体布局下的宽度分离原则")]),t._v(" "),a("blockquote",[a("p",[t._v("所谓“宽度分离原则”，就是 CSS 中的 width 属性不与影响宽的 padding/border（有时包括 margin）属性共存")])]),t._v(" "),a("p",[t._v("也就是不能出现以下的组合：")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1px solid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("有人可能问：不这么写，该怎么写呢？很简单，"),a("code",[t._v("分离width独立占用一层标签，而padding、border、margin利用流动性在内部自适应呈现")])]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".father")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 180px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".sone")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1px solid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h4",{attrs:{id:"为何要宽度分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何要宽度分离"}},[t._v("#")]),t._v(" 为何要宽度分离")]),t._v(" "),a("p",[t._v("在前段领域，一提到分离，作用一定是便于维护。比方说，样式和行为分离、前后端分离或者这里的“宽度分离”")]),t._v(" "),a("p",[t._v("道理其实很简单，当一件事情的发展可以被多个因素所左右的时候，这个事情最终的结果就会变数很大不可预期。由于盒尺寸的 4 个盒子都能影响宽度，自然页面元素的最终宽度就很容易发生变化而导致意想不到的布局发生")]),t._v(" "),a("h4",{attrs:{id:"可能的挑战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可能的挑战"}},[t._v("#")]),t._v(" 可能的挑战")]),t._v(" "),a("p",[t._v("“宽度分离”多使用一层标签，这 HTML 成本也是成本啊！没错，过深的嵌套是会增加页面渲染和维护成本的。但是，这里要抛出一句话，实际上，如果不考虑替换元素，这世界上绝大多数的网页，只需要一个 width 设定就可以了，没错，值需要一个 width，就是最外层限制网页主题的内容宽度的那个 width，而里面所有元素都没有理由再出现 width 设置。所以，“宽度分离”虽然多了一层标签，但最终也就多了一层标签而已，这个成本跟收益比起来简直就是毛毛雨")]),t._v(" "),a("h3",{attrs:{id:"改变-width-height-作用细节的-box-sizing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改变-width-height-作用细节的-box-sizing"}},[t._v("#")]),t._v(" 改变 width/height 作用细节的 box-sizing")]),t._v(" "),a("p",[t._v("box-sizing 虽然是 CSS3 属性，但是，让人受宠若惊的是 IE8 浏览器就支持它，不过需要加-ms-私有前缀，但 IE9 浏览器开始就不需要私有前缀了")]),t._v(" "),a("h4",{attrs:{id:"box-sizing-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#box-sizing-的作用"}},[t._v("#")]),t._v(" box-sizing 的作用")]),t._v(" "),a("p",[t._v("box-sizing 顾名思义就是“盒尺寸”，实际上，更准确的叫法应该是“盒尺寸的作用细节”，或者通俗一点，叫“width 作用的细节”，也就是说，"),a("code",[t._v("box-sizing属性的作用是改变width的作用细节")])]),t._v(" "),a("p",[t._v("那它改变了什么细节呢？一句话，改变了 width 作用的盒子。还记不记得“内在盒子”的 4 个盒子？它们分别是 content box、padding box、border box 和 margin box。默认情况下，width 是作用在 content box 上的，box-sizing 的作用就是可以把 width 作用的很自变成其他几个")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("box-sizing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" content-box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*默认值*/")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("box-sizing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" padding-box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*Firefox*/")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("box-sizing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" border-box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*全线支持*/")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("box-sizing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" margin-box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*从未支持过*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h4",{attrs:{id:"为何-box-sizing-不支持-margin-box"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何-box-sizing-不支持-margin-box"}},[t._v("#")]),t._v(" 为何 box-sizing 不支持 margin-box")]),t._v(" "),a("p",[t._v("不支持 margin-box 最大的原因是它本身就没有价值！我们不妨好好想想，一个元素，如果我们使用 width 或 height 设定好了尺寸，请问，我们此时设置 margin 值，其 offset 尺寸会有变化吗？不会啊，100 像素宽度的元素，再怎么设置 margin，它还是 100 像素宽度。但是，border 和 padding 就不一样了，100 像素宽度的元素，设置个 20 像素的 padding 值，offsetWidth 就是 140 像素了，尺寸会变化。你说，一个本身并不会改变元素尺寸的盒子，它有让 box-sizing 支持的道理吗？box-sizing 就是改变尺寸作用规则的！margin 只有在 width 为 auto 的时候可以改变元素的尺寸，但是，此时元素已经处于流动性状态，根本就不需要 box-sizing。所以，说来说去就是 margin-box 本身就没有价值")]),t._v(" "),a("p",[t._v("另外一个原因牵扯到语义。如果 box-sizing 开了先河支持了 margin-box，margin box 就变成了一个“显式的盒子”，让 background-origin 等属性何去何从，支持还是不支持呢？“margin 的背景永远是透明的”这几个大字可是在规范写的清清楚楚，难道让背景色在所谓的 margin box 中也显示？显然是不可能的，要想让规范打自己的脸，可能吗？")])])}),[],!1,null,null,null);s.default=e.exports}}]);